Create a simple script file with data:

Create a simple script file (e.g., script.sh) with some data in it. Here's an example:

            #!/bin/bash
            
            echo "Hello, this is a simple script."
            echo "Today's date is $(date)."
Push the script file to your GitHub repository:

Initialize a new Git repository in your project directory, add the script file, commit the changes, and push them to your GitHub repository.

           >git init
            >git add script.sh
            >git commit -m "Add script file"
            >git remote add origin <your_github_repository_url>
            >git push -u origin master

Replace <your_github_repository_url> with the URL of your GitHub repository.

Set up Jenkins and GitHub integration:

Install and configure Jenkins on your server as described in the previous response.
Install the GitHub plugin in Jenkins to enable integration with GitHub.
Configure Jenkins to connect to your GitHub repository by adding your GitHub credentials.
Create a Jenkins project:

In Jenkins, click on "New Item" to create a new project.
Enter a name for your project and select "Freestyle project", then click "OK".
In the project configuration, under "Source Code Management", select "Git" and enter the URL of your GitHub repository.
Under "Build Triggers", select "GitHub hook trigger for GITScm polling" to trigger builds automatically when changes are pushed to GitHub.
Under "Build", add a build step to execute your script file. You can add a "Execute shell" build step and enter the command bash script.sh.
Under "Post-build Actions", configure email notifications to send the build results to your email address.
Test the setup:

Make a change to your script file, commit the changes, and push them to your GitHub repository. This should trigger a build in Jenkins, and you should receive an email notification with the build results.
